const u="./audio/multi-sample-instruments/",m="./audio/single-samples/",f=[48,50,52,53,55,57].sort((r,e)=>r-e),d={instrumentName:"soft-piano",directory:u+"default/",fileExt:"mp3",samples:f.map(r=>({midiNote:r,path:`${u}default/${r}.mp3`}))},p={instrumentName:"defaultSample",fileExt:"mp3",directory:m+"default/",midiNote:60,path:m+"default/sPno_60.mp3"},g={singleSample:p,multiSample:d},M={sampler_mode:"single-sample",defaultInstruments:g},T={DEFAULTS:{VELOCITY:100,MIDDLE_C:60}},S=.01,h=.05;class w{context;masterGain;silenceThreshold=.18;rootMidiNote=60;config;loadedInstruments=new Map;singleSampleBuffers=new Map;multiSampleBuffers=new Map;activeVoiceNodes=new Map;samplerMode;constructor(){this.config=M,this.context=new AudioContext,this.masterGain=this.context.createGain(),this.masterGain.gain.value=1,this.masterGain.connect(this.context.destination),this.samplerMode=this.config.sampler_mode}async initialize(){if(this.samplerMode==="multi-sample")await this.loadMulti(this.config.defaultInstruments.multiSample.samples);else if(this.samplerMode==="single-sample")await this.loadSingle(this.config.defaultInstruments.singleSample.path);else throw new Error("Invalid sampler mode")}async ensureContextRunning(){this.context.state!=="running"&&await this.context.resume()}async setSamplerMode(e){e!==this.samplerMode&&(this.activeVoiceNodes.size>0&&(this.activeVoiceNodes.forEach(t=>t.source.stop()),this.activeVoiceNodes.clear()),e==="multi-sample"&&this.multiSampleBuffers.size===0?await this.loadMulti(this.config.defaultInstruments.multiSample.samples):e==="single-sample"&&this.singleSampleBuffers.size===0&&await this.loadSingle(this.config.defaultInstruments.singleSample.path),this.samplerMode=e)}detectThresholdCrossing(e){const t=e.numberOfChannels,s=e.sampleRate,i=Array.from({length:t},(a,n)=>e.getChannelData(n));for(let a=0;a<i[0].length;a++)if(Math.max(...i.map(o=>Math.abs(o[a])))>this.silenceThreshold)return a/s;return 0}async fetchAudioFile(e){const t=await fetch(e);if(!t.ok)throw new Error(`Failed to fetch audio file: ${e} (${t.status})`);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const s=await t.arrayBuffer();return s.byteLength<2e3&&console.warn("Warning: Received suspiciously small audio file"),s}async decodeAudioData(e){if(!this.context)throw new Error("Audio context not initialized");if(this.context.state!=="running"&&(this.context.resume(),console.log("Resuming audio context")),!e)throw new Error("Array buffer is empty");return this.context.decodeAudioData(e)}async loadSingle(e){this.rootMidiNote=this.config.defaultInstruments.singleSample.midiNote;const t=await this.fetchAudioFile(e),s=await this.decodeAudioData(t);this.detectThresholdCrossing(s);const i=new Map;i.set(0,s),this.singleSampleBuffers.clear(),this.singleSampleBuffers=i}async loadMulti(e){const t=new Map,s=new Map;try{console.log("trying to load multi"),await Promise.all(e.map(async({midiNote:i,path:a})=>{const n=await this.fetchAudioFile(a),o=await this.decodeAudioData(n),l=this.detectThresholdCrossing(o);this.multiSampleBuffers.set(i,o),t.set(i,o),s.set(i,l)})),this.loadedInstruments.set("0",{midiBufferMap:t,midiStartTimeMap:s}),console.log("Loaded samples:",this.multiSampleBuffers)}catch(i){throw console.error("Failed to load multi-samples:",i),i}}createVoiceNode(e){const t=this.context.createBufferSource();t.buffer=e;const s=this.context.createGain();return t.connect(s).connect(this.masterGain),{source:t,gain:s}}getBufferFromMidi(e,t=this.samplerMode){switch(console.log("mode: ",t),t){case"single-sample":return{buffer:this.singleSampleBuffers.get(0),sampleMidiNote:this.rootMidiNote};case"multi-sample":if(this.multiSampleBuffers.has(e))return{buffer:this.multiSampleBuffers.get(e),sampleMidiNote:e,startTime:this.loadedInstruments.get("0").midiStartTimeMap.get(e)};{const s=this.getClosestMidiNote(e);if(s===null)throw new Error("No samples available");return{buffer:this.multiSampleBuffers.get(s),sampleMidiNote:s,startTime:this.loadedInstruments.get("0").midiStartTimeMap.get(s)}}default:throw new Error("Invalid sampler mode")}}getClosestMidiNote(e){const t=Array.from(this.multiSampleBuffers.keys());return t.length===0?null:t.reduce((s,i)=>{const a=Math.abs(i-e),n=Math.abs(s-e);return a<n?i:s})}playNote(e,t=T.DEFAULTS.VELOCITY){const{buffer:s,sampleMidiNote:i,startTime:a}=this.getBufferFromMidi(e),n=this.createVoiceNode(s);let o=440*Math.pow(2,(i-69)/12);const l=440*Math.pow(2,(e-69)/12);n.source.playbackRate.value=l/o;const c=this.context.currentTime;this.triggerAttack(c,n,t),n.source.start(c,a??0),this.activeVoiceNodes.set(e,n)}stopNote(e){const t=this.activeVoiceNodes.get(e);if(t){const s=this.context.currentTime;this.triggerRelease(s,t),t.source.stop(s+h),this.activeVoiceNodes.delete(e)}}triggerAttack(e,t,s){t.gain.gain.cancelScheduledValues(this.context.currentTime),t.gain.gain.setValueAtTime(0,this.context.currentTime),t.gain.gain.linearRampToValueAtTime(s/127,e+S)}triggerRelease(e,t){t.gain.gain.cancelScheduledValues(this.context.currentTime),t.gain.gain.setValueAtTime(t.gain.gain.value,e),t.gain.gain.linearRampToValueAtTime(0,e+h)}}export{w as W};
//# sourceMappingURL=audio-engine-QnhPrbqL.js.map
